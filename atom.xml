<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>珊珊的小本子</title>
  
  <subtitle>一个记满小鱼干的小本本</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-21T11:28:00.807Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yvoone</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>提高网页加载速度</title>
    <link href="http://yoursite.com/2020/03/21/%E6%8F%90%E9%AB%98%E7%BD%91%E9%A1%B5%E5%8A%A0%E8%BD%BD%E9%80%9F%E5%BA%A6/"/>
    <id>http://yoursite.com/2020/03/21/%E6%8F%90%E9%AB%98%E7%BD%91%E9%A1%B5%E5%8A%A0%E8%BD%BD%E9%80%9F%E5%BA%A6/</id>
    <published>2020-03-21T11:27:54.000Z</published>
    <updated>2020-03-21T11:28:00.807Z</updated>
    
    <content type="html"><![CDATA[<p>1.尽可能的减少HTTP的请求</p><p>将同类资源合并成一个文件如图片 css文件</p><p>2.使用CDN（内容分发： 在各地部署副本服务器）</p><ol start="3"><li>添加 expire /cache-Control控制缓存机制</li></ol><p>服务器发送应答的时候添加了一个时间值，本机根据时间值判断是否过期而发送http请求</p><p>4.启用Gzip 压缩</p><p>文本内容 进行文本压缩 html php js css xml txt，减少传输大小</p><p>5.将css 文件放在页面最上面</p><p>解决禁止页面的显示 ，重画（闪烁问题）</p><p>6.将Script文件放在文件最下面</p><p>html 加载的顺序： html-head-meta-title-style-link- script-body-div-img-页面加载完毕</p><p>7.避免css中使用Expressions（避免在css中加入js代码）</p><p>8.把js、css放在外部文件中</p><p>9、减小DNS查询 （缓存，单域还是多域）</p><p>10.压缩js、css （减少文件体积、空格、格式符、注释，简写方法名、参数名）</p><p>11.避免重定向 【301（永久重定向）移动到另外的位置 302找到了不在原始地址（暂时重定向）】</p><p>12.移除重复的脚本</p><p>13.配置实体标签【对比有没有修改，没有修改就用缓存】</p><p>14.使用Ajax请求（异步的js和xml）分批加载和局部更新</p><p>插件Yslow 使用火狐支持最好  基于firebug</p><p>对网站分析 给建议、规则 -&gt; 优化</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.尽可能的减少HTTP的请求&lt;/p&gt;
&lt;p&gt;将同类资源合并成一个文件如图片 css文件&lt;/p&gt;
&lt;p&gt;2.使用CDN（内容分发： 在各地部署副本服务器）&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;添加 expire /cache-Control控制缓存机制&lt;/li&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>SEO</title>
    <link href="http://yoursite.com/2020/03/21/SEO/"/>
    <id>http://yoursite.com/2020/03/21/SEO/</id>
    <published>2020-03-21T11:26:28.000Z</published>
    <updated>2020-03-21T11:26:44.192Z</updated>
    
    <content type="html"><![CDATA[<p>1.简介</p><p>SEO 搜索引擎优化</p><p>分类：</p><p>白帽SEO  ：</p><p>内容上的SEO</p><p>网站标题 关键字 描述</p><p>合理设置Robot.txt</p><p>增加外链引用</p><p>提交网站地图</p><p>网站i结构布局优化：</p><p>合理规划站点结构（扁平化结构）</p><p>1.控制首页链接数量（要有 100左右）</p><p>2.扁平化的目录层次（跳转3次能狗到达网站任何的位置）</p><p>3.导航SEO优化（面包屑网站组织清晰）</p><p>4.分页 首页 上页 页列表 下页 尾页</p><p>5.网站加载速度 （控制页面大小）</p><p>网页 代码优化</p><p>title</p><p>meta keywords</p><p>meta description （每页不同）</p><p>语义化代码 h1 ul ol dl em</p><p>a 要加 title  table 加 caption img加alt  strong  em （强调）</p><p>重要代码在前</p><p>重要内容不要用js 输出</p><p>少用iframe框架</p><p>谨慎使用display： none （爬虫会忽略）</p><p>标签尽量少</p><p> 外链的a标签 加上 rel=“nofollow”</p><p>黑帽SEO </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.简介&lt;/p&gt;
&lt;p&gt;SEO 搜索引擎优化&lt;/p&gt;
&lt;p&gt;分类：&lt;/p&gt;
&lt;p&gt;白帽SEO  ：&lt;/p&gt;
&lt;p&gt;内容上的SEO&lt;/p&gt;
&lt;p&gt;网站标题 关键字 描述&lt;/p&gt;
&lt;p&gt;合理设置Robot.txt&lt;/p&gt;
&lt;p&gt;增加外链引用&lt;/p&gt;
&lt;p&gt;提交网站地图&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>内存机制</title>
    <link href="http://yoursite.com/2020/03/21/%E5%86%85%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2020/03/21/%E5%86%85%E5%AD%98%E6%9C%BA%E5%88%B6/</id>
    <published>2020-03-21T11:24:00.000Z</published>
    <updated>2020-03-21T11:26:44.191Z</updated>
    
    <content type="html"><![CDATA[<p>内存模型 分：栈 、堆、池（一般归为栈）</p><p>栈：变量 =》 基础数据类型（NUM、String、Null、 Undefined、Boolean）</p><p>复制—》重新分配空间</p><p>堆：复杂对象 =》引用数据类型 （操作对象的引用）</p><p>复制后 —》实际操作都是同一个对象</p><p>池：常量</p><p>生命周期</p><p>内存分配：声明变量、函数、对象 （分配）</p><p>内存使用：使用函数、变量读写内存</p><p>内存回收：垃圾回收机制回收不再使用的内存</p><p>typeof(null) //object </p><p>typeof(undefined) //undefined</p><p>构造函数和立即执行函数的声明周期是什么：</p><p>函数表达式必须等到Javascirtp引擎执行到它所在行时，才会从上而下一行一行地解析函数表达式。</p><p>函数声明提升：以把函数声明放在调用它的语句后。</p><p>立即执行函数：在函数表达式后面紧跟一个小括号（），函数会立即执行，两大要点是：表达式、括号（）；</p><p>( function(){…} )() 或 </p><p>( function (){…} () )  </p><p>内存回收机制</p><p>回收不在使用的内存！（不存在引用了！）</p><p>内存泄露： 不再用到的内存，没有及时释放，就叫做内存泄漏（memory leak）。</p><p>&lt;— 两个对象相互引用，即使不在使用垃圾机制也不进行回收！（一般与DOM元素绑定）</p><p>浏览器 过去 使用引用计算算法</p><p>现在 使用标记清楚算法（清楚从根开始无法到达的对象）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;内存模型 分：栈 、堆、池（一般归为栈）&lt;/p&gt;
&lt;p&gt;栈：变量 =》 基础数据类型（NUM、String、Null、 Undefined、Boolean）&lt;/p&gt;
&lt;p&gt;复制—》重新分配空间&lt;/p&gt;
&lt;p&gt;堆：复杂对象 =》引用数据类型 （操作对象的引用）&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>webpack简单认识</title>
    <link href="http://yoursite.com/2020/03/21/webpack/"/>
    <id>http://yoursite.com/2020/03/21/webpack/</id>
    <published>2020-03-21T07:34:51.000Z</published>
    <updated>2020-03-23T08:24:26.353Z</updated>
    
    <content type="html"><![CDATA[<h3 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h3><h4 id="commonjsJs"><a href="#commonjsJs" class="headerlink" title="commonjsJs"></a>commonjsJs</h4><p>广泛使用的javascript模块化规范，node.js采用这种方式得以流行。<br>缺点：无法直接运行在浏览器环境下</p><h4 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h4><p>异步加载依赖模块，可直接在浏览器运行，但是javascript运行环境没有原生支持，需要倒入AMD库</p><h4 id="ES6模块化"><a href="#ES6模块化" class="headerlink" title="ES6模块化"></a>ES6模块化</h4><p>语言层面上实现模块化，浏览器和nodejs支持改规范</p><h4 id="样式文件的模块化如SCSS"><a href="#样式文件的模块化如SCSS" class="headerlink" title="样式文件的模块化如SCSS"></a>样式文件的模块化如SCSS</h4><h3 id="新语言"><a href="#新语言" class="headerlink" title="新语言"></a>新语言</h3><h4 id="ES6-js下一代标准"><a href="#ES6-js下一代标准" class="headerlink" title="ES6 js下一代标准"></a>ES6 js下一代标准</h4><h4 id="Typescript"><a href="#Typescript" class="headerlink" title="Typescript"></a>Typescript</h4><p>js 超集，可被编译成ES5，ES6标准，支持ES6所有功能和静态类型检查。缺点：无法直接在浏览器和node环境运行</p><h4 id="Flow"><a href="#Flow" class="headerlink" title="Flow"></a>Flow</h4><p>js超集，比ts灵活</p><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><p>构建的主要工作：代码转换，文件优化，代码分割，模块合并，自动刷新，代码校验，自动发布。</p><h4 id="常用构建工具"><a href="#常用构建工具" class="headerlink" title="常用构建工具"></a>常用构建工具</h4><h5 id="Npm-Script"><a href="#Npm-Script" class="headerlink" title="Npm Script"></a>Npm Script</h5><p>任务执行者，是npm内置功能，通过package.json中scripts定义任务。底层通过调用shell运行脚本。无需安装其他依赖，缺点：太简单。</p><h5 id="Grunt"><a href="#Grunt" class="headerlink" title="Grunt"></a>Grunt</h5><p>进化版的npm script，集成度不高，无法开箱即用</p><h5 id="Glup"><a href="#Glup" class="headerlink" title="Glup"></a>Glup</h5><p>基于流自动化构建工具，灵活好用，可单独构建，亦可搭配其他工具使用。缺点和Grunt一致。</p><h5 id="Fis3"><a href="#Fis3" class="headerlink" title="Fis3"></a>Fis3</h5><p>百度优秀国产构建工具，功能强大，集成各种web所需构建功能，但是官方不再维护且不支持最新版本nodejs</p><h5 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h5><p>专注于构建模块化项目，缺点只能用于模块化项目。</p><h5 id="Rollup"><a href="#Rollup" class="headerlink" title="Rollup"></a>Rollup</h5><p>类似webpack，但不如webpack完善</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><pre><code>npm i -D webpack@&lt;version&gt; npm i --save-dev webpack@&lt;version&gt; npm i -g webpack // 全局</code></pre><p>  非全局安装成功后可以一下命令查看版本</p><pre><code>node_modules/webpack/bin/webpack.js -vnode_modules/.bin/webpack -v // 安装后bin文件夹里会多了一个webpack可执行文件的软链</code></pre><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>webpack 执行构建，如果根目录存在webpack.config.js，默认会读取里面的配置。注意配置至少定义入口文件和输出文件。没有配置webpack.config.js文件也可执行。</p><pre><code>node_modules/webpack/bin/webpack.js &lt;入口文件名&gt; &lt;输出文件名&gt;node_modules/.bin/webpack &lt;入口文件名&gt; &lt;输出文件名&gt;</code></pre><p>此时生成打包后文件会出现在根目录下。</p><h1 id="webpack-核心概念"><a href="#webpack-核心概念" class="headerlink" title="webpack 核心概念"></a>webpack 核心概念</h1><p>webpack从entry递归解析出所有依赖的module，根据配置的loader进行转换，安装Entry进行分组，每个分组一个Chunk，最后将chunk转换成文件输出</p><ol><li><p>Entry<br>入口，webpack构建的第一步。</p></li><li><p>Modules<br>模块，webpack中一切皆可视为模块，webpack会从入口递归找出所有依赖模块。配置处理模块的规则，</p></li><li><p>Chunk<br>代码块，用于代码分割合并，一个chunk可以由多个模块生成。</p></li><li><p>Loader<br>转换器</p></li><li><p>Plugin<br>扩展插件</p></li><li><p>Output<br>输出结果</p></li></ol><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>配置webpack方式：</p><ol><li>通过js描述文件，如：webpack.config.js</li><li>webpack 可执行文件命令行传参 如：webpack–devtool source-map</li></ol><h2 id="Entry"><a href="#Entry" class="headerlink" title="Entry"></a>Entry</h2><p>配置模块入口，必填。<br>入口文件的路径可以是相对路径，webpack寻找相对路径文件以context为根目录，context默认值为执行启动webpack时所在的当前工作目录，且context必须是一个绝对路径的字符串。</p><p>修改context方式：</p><ol><li><p>配置文件设置</p><p> module.export = {<br>   context: path.resolve(__dirname, ‘app’)<br> }</p></li><li><p>启动命令带参</p><p> webpack –context XXX</p></li></ol><table><thead><tr><th>类型</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td>Sting</td><td>单一入口，输出Chunk名称为main</td><td>entry：’index.js’</td></tr><tr><td>Array&lt;String&gt;</td><td>单一入口，仅会输出最后一个Chunk，名称为main</td><td>entry: [‘index.js’, ‘home.js’]</td></tr><tr><td>Object</td><td>多入口,每个入口生成一个Chunk，Chunk名称为Object‘ s key name</td><td>entry: {<br> index: ‘index.js’,<br> home: ‘home.js’<br> }</td></tr></tbody></table><p>动态配置入口,函数动态返回入口配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">entry：() =&gt; &#123;</span><br><span class="line"><span class="comment">// 同步</span></span><br><span class="line">  <span class="comment">// return &#123;</span></span><br><span class="line">  <span class="comment">//   <span class="doctag">XXX:</span> 'XXXX',</span></span><br><span class="line">  <span class="comment">//   <span class="doctag">XXX:</span> 'XXXX',</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 异步</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span> ( <span class="function">(<span class="params">resolve</span>)=&gt;</span> &#123;</span><br><span class="line">    resolve(&#123;</span><br><span class="line">      XXX: <span class="string">'XXXX'</span>,</span><br><span class="line">      XXX: <span class="string">'XXXX'</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><p>内资变量表</p><table><thead><tr><th>变量名</th><th>含义</th></tr></thead><tbody><tr><td>id</td><td>chunk唯一标识，从0开始</td></tr><tr><td>name</td><td>chunk名称</td></tr><tr><td>hash</td><td>chunk唯一标识hash值,长度可指定，默认[hash:20]</td></tr><tr><td>chunkhash</td><td>chunk内容的hash,长度可指定，默认[hash:20]</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Output 对象类型 </span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// chunkFilename: 'XX', // 配置没入口的chunk输出文件名</span></span><br><span class="line">    <span class="comment">// filename: 'bundle.js', // &lt;输出文件名&gt; 配置单一入口时</span></span><br><span class="line">    filename: <span class="string">'[name]_[chunkhash:8].js'</span>, <span class="comment">//  &lt;输出文件名&gt; 配置多入口时</span></span><br><span class="line">    path: __dirname + <span class="string">'/home/proj/cdn/assets/[hash]'</span>, <span class="comment">// &lt;输出文件时存放的本地目录&gt; 必须时String类型的绝对路径</span></span><br><span class="line">    <span class="comment">// path: path.resolve(__dirname, 'dist_[hash]')可使用node 的path模块获取绝对路径 </span></span><br><span class="line">    publicPath: <span class="string">'http://cdn.example.com/assets/[hash]/'</span>, <span class="comment">// &lt;发布到线上异步资源URL前缀，相对路径，默认''&gt; 谨慎使用很容易出错</span></span><br><span class="line">    : <span class="string">''</span>, </span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><table><thead><tr><th>output其他常用属性</th><th>可选值</th><th>说明</th></tr></thead><tbody><tr><td>crossOriginLoading</td><td>anonymous,默认值。加载脚本不会带上用户的Cookies<br>use-credentials 会带上Cookies</td><td>jsonp原理引入script加载异步资源，用于设置异步引入标签的crossorigin值</td></tr><tr><td>library</td><td>字符串</td><td>导出库的名称，常与libraryTarget一起使用</td></tr><tr><td>libraryTarget</td><td>字符串枚举值，[‘var’, ‘commonjs’, ‘commonjs2’, ‘this’, ‘window’, ‘global’]详情见<a href="https://webpack.docschina.org/configuration/output/#output-librarytarget" target="_blank" rel="noopener">官网</a></td><td>何种方式导出库</td></tr><tr><td>libraryExport</td><td></td><td>只有在libraryTarget设置为commonjs和commonjs2才有意义</td></tr></tbody></table><h2 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h2><table><thead><tr><th>Module属性</th><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>noParse</td><td>RegExp,[RegExp],function</td><td>设置让webpack忽略的无需模块化的文件，且被忽略文件不应该有模块化语句，如require，import，define</td></tr><tr><td>rules</td><td>Array</td><td>创建模块时，匹配请求的规则数组。这些规则能够修改模块的创建方式。这些规则能够对模块(module)应用 loader，或者修改解析器(parser)。<br>每个规则可以分为三部分 - 条件(condition)，结果(result)和嵌套规则(nested rule)<br>test、include、exclude选中应用loader的文件，指出字符串，正则，数组<br>use 设置应用loader数组，默认从右往左执行。enfore设置执行顺序的最前pre和最后post。</td></tr></tbody></table><p>webpack内置了对js的解析功能，parser支持更细粒度地配置模块语法解析，其与noParse区别在于，前者精确到语法层面，后者只控制到文件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [&#123;</span><br><span class="line">    test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">    use:[<span class="string">'babel-loader'</span>],</span><br><span class="line">    parser:&#123;</span><br><span class="line">      amd: <span class="literal">false</span>, <span class="comment">// 禁用AMD</span></span><br><span class="line">      system: <span class="literal">false</span>, <span class="comment">// 禁用system</span></span><br><span class="line">      commonjs:<span class="literal">false</span>, <span class="comment">// 禁用commonjs</span></span><br><span class="line">      harmony: <span class="literal">false</span>，<span class="comment">// 禁用ES6 import / export</span></span><br><span class="line">      requireInclude: <span class="literal">false</span>, <span class="comment">// 禁用require.include</span></span><br><span class="line">      requireEnsure:<span class="literal">false</span>, <span class="comment">// 禁用require.ensure</span></span><br><span class="line">      requireContext: <span class="literal">false</span>, <span class="comment">// 禁用require.context</span></span><br><span class="line">      browserify: <span class="literal">false</span>, <span class="comment">// 禁用browerify</span></span><br><span class="line">      requirejs: <span class="literal">false</span> <span class="comment">// 禁用requirejs</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Resolve"><a href="#Resolve" class="headerlink" title="Resolve"></a>Resolve</h2><p>设置webpack如何去寻找依赖的模块</p><table><thead><tr><th>resolve属性</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>alias</td><td>alias:{commponents: ‘./src/commonents’}</td><td>配置别名来映射导入路径</td></tr><tr><td>mainFields</td><td>mainFields:[‘browser’, ‘main’]</td><td>优先采用多分第三方模块的那块代码</td></tr><tr><td>extensions</td><td>extensions:[‘.ts’, ‘.js’, ‘.json’]</td><td>导入语句没有后缀时，配置后缀匹配列表</td></tr><tr><td>modules</td><td>modules: [‘../src/components’, ‘node_modules’]</td><td>去那些目录寻找第三方模块，默认node_modules</td></tr><tr><td>descriptonFiles</td><td>descriptonFiles:[‘package.json’]</td><td>配置描述第三方模块的描述，默认package.json</td></tr><tr><td>enforceExtension</td><td>enforceExtension:true</td><td>是否需要带后缀</td></tr><tr><td>enforeModuleExtension</td><td>enforeModuleExtension: false</td><td>与enforceExtension相似，但只对node_modules下的模块生效</td></tr></tbody></table><h2 id="Plugins"><a href="#Plugins" class="headerlink" title="Plugins"></a>Plugins</h2><p>pligins接收一个数组，数组每项都是一个要使用的plugin的示例，难点在于plugin本身的配置。</p><h2 id="DevServer"><a href="#DevServer" class="headerlink" title="DevServer"></a>DevServer</h2><p>用于改变DevServer的默认行为。只有通过DevServer启动Webpack时，配置文件的devserver才生效。</p><table><thead><tr><th>DevServer配置</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>hot</td><td>模块热替换功能，不刷新页面，自动实时预览</td><td></td></tr><tr><td>inline</td><td>若果想实时预览就开启</td><td></td></tr><tr><td>historyApiFallback</td><td>单页面应用针对命中路由返回对应html文件</td><td>historyApiFallback:true, // 都返回index.html<br>historyApiFallback:{rewrites: [{from: ‘/^/user/‘, to: ‘/user.html’},<br>{from: ‘/^/game/‘, to: ‘/game.html}]}</td></tr><tr><td>contentBase</td><td>DevServer HTTP服务器的文件根目录，默认当前执行目录</td><td>contentBase:path.join(__dirname, ‘public’)</td></tr><tr><td>headers</td><td>在http响应中注入http头</td><td>headers: {‘X-for’: ‘cus’}</td></tr><tr><td>host</td><td>DevServer服务监听的地址</td><td></td></tr><tr><td>port</td><td>DevServer服务监听的端口，默认8080，被占用沿用下一个</td><td></td></tr><tr><td>allowedHosts</td><td>配置白名单列表,只有http请求的host在列表中才能得到正常返回</td><td>allowedHosts:[‘host.com//单个’, ‘.host2.com//匹配多个’]</td></tr><tr><td>disableHostCheck</td><td>是否关闭用于DNS重新绑定的http请求的host检查，默认只接受本地请求，通过IP地址访问，需要关闭host检查</td><td></td></tr><tr><td>https</td><td>是否启用https，devServer默认HTTP服务，HTTP2和Service Worker必须运行在https</td><td></td></tr><tr><td>clientLogLevel</td><td>客户端日志等级，枚举值none、warnin、info、error取其一，默认info（所有类型日志）</td><td></td></tr><tr><td>compress</td><td>是否启用Gzip，默认false</td><td></td></tr><tr><td>open</td><td>浏览器打开开发网页，默认false，devServer.openPage配置指定URL页面</td><td></td></tr></tbody></table><h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><table><thead><tr><th>配置</th><th>说明</th></tr></thead><tbody><tr><td>target</td><td>针对不同运行环境的代码</td></tr><tr><td>devtool</td><td>如何生成source map,默认false，开启：devtool: ‘source-map’</td></tr><tr><td>wath</td><td>支持监听文件更新， 默认关闭</td></tr><tr><td>watchOptions</td><td>文件更显监听配置 poll 每秒询问次数</td></tr><tr><td>enternals</td><td>不用被打包的模块</td></tr><tr><td>resolveLoader</td><td>如何寻找loader</td></tr></tbody></table><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// entry 表示 入口，Webpack 执行构建的第一步将从 Entry 开始，可抽象成输入。</span></span><br><span class="line">  <span class="comment">// 类型可以是 string | object | array   </span></span><br><span class="line">  entry: <span class="string">'./app/entry'</span>, <span class="comment">// 只有1个入口，入口只有1个文件</span></span><br><span class="line">  entry: [<span class="string">'./app/entry1'</span>, <span class="string">'./app/entry2'</span>], <span class="comment">// 只有1个入口，入口有2个文件</span></span><br><span class="line">  entry: &#123; <span class="comment">// 有2个入口</span></span><br><span class="line">    a: <span class="string">'./app/entry-a'</span>,</span><br><span class="line">    b: [<span class="string">'./app/entry-b1'</span>, <span class="string">'./app/entry-b2'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如何输出结果：在 Webpack 经过一系列处理后，如何输出最终想要的代码。</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// 输出文件存放的目录，必须是 string 类型的绝对路径。</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出文件的名称</span></span><br><span class="line">    filename: <span class="string">'bundle.js'</span>, <span class="comment">// 完整的名称</span></span><br><span class="line">    filename: <span class="string">'[name].js'</span>, <span class="comment">// 当配置了多个 entry 时，通过名称模版为不同的 entry 生成不同的文件名称</span></span><br><span class="line">    filename: <span class="string">'[chunkhash].js'</span>, <span class="comment">// 根据文件内容 hash 值生成文件名称，用于浏览器长时间缓存文件</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发布到线上的所有资源的 URL 前缀，string 类型</span></span><br><span class="line">    publicPath: <span class="string">'/assets/'</span>, <span class="comment">// 放到指定目录下</span></span><br><span class="line">    publicPath: <span class="string">''</span>, <span class="comment">// 放到根目录下</span></span><br><span class="line">    publicPath: <span class="string">'https://cdn.example.com/'</span>, <span class="comment">// 放到 CDN 上去</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 导出库的名称，string 类型</span></span><br><span class="line">    <span class="comment">// 不填它时，默认输出格式是匿名的立即执行函数</span></span><br><span class="line">    library: <span class="string">'MyLibrary'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 导出库的类型，枚举类型，默认是 var</span></span><br><span class="line">    <span class="comment">// 可以是 umd | umd2 | commonjs2 | commonjs | amd | this | var | assign | window | global | jsonp ，</span></span><br><span class="line">    libraryTarget: <span class="string">'umd'</span>, </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否包含有用的文件路径信息到生成的代码里去，boolean 类型</span></span><br><span class="line">    pathinfo: <span class="literal">true</span>, </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 附加 Chunk 的文件名称</span></span><br><span class="line">    chunkFilename: <span class="string">'[id].js'</span>,</span><br><span class="line">    chunkFilename: <span class="string">'[chunkhash].js'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// JSONP 异步加载资源时的回调函数名称，需要和服务端搭配使用</span></span><br><span class="line">    jsonpFunction: <span class="string">'myWebpackJsonp'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生成的 Source Map 文件名称</span></span><br><span class="line">    sourceMapFilename: <span class="string">'[file].map'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 浏览器开发者工具里显示的源码模块名称</span></span><br><span class="line">    devtoolModuleFilenameTemplate: <span class="string">'webpack:///[resource-path]'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 异步加载跨域的资源时使用的方式</span></span><br><span class="line">    crossOriginLoading: <span class="string">'use-credentials'</span>,</span><br><span class="line">    crossOriginLoading: <span class="string">'anonymous'</span>,</span><br><span class="line">    crossOriginLoading: <span class="literal">false</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 配置模块相关</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [ <span class="comment">// 配置 Loader</span></span><br><span class="line">      &#123;  </span><br><span class="line">        test: <span class="regexp">/\.jsx?$/</span>, <span class="comment">// 正则匹配命中要使用 Loader 的文件</span></span><br><span class="line">        include: [ <span class="comment">// 只会命中这里面的文件</span></span><br><span class="line">          path.resolve(__dirname, <span class="string">'app'</span>)</span><br><span class="line">        ],</span><br><span class="line">        exclude: [ <span class="comment">// 忽略这里面的文件</span></span><br><span class="line">          path.resolve(__dirname, <span class="string">'app/demo-files'</span>)</span><br><span class="line">        ],</span><br><span class="line">        use: [ <span class="comment">// 使用那些 Loader，有先后次序，从后往前执行</span></span><br><span class="line">          <span class="string">'style-loader'</span>, <span class="comment">// 直接使用 Loader 的名称</span></span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">'css-loader'</span>,      </span><br><span class="line">            options: &#123; <span class="comment">// 给 html-loader 传一些参数</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    noParse: [ <span class="comment">// 不用解析和处理的模块</span></span><br><span class="line">      /special-library\.js$/  <span class="comment">// 用正则匹配</span></span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 配置插件</span></span><br><span class="line">  plugins: [</span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 配置寻找模块的规则</span></span><br><span class="line">  resolve: &#123; </span><br><span class="line">    modules: [ <span class="comment">// 寻找模块的根目录，array 类型，默认以 node_modules 为根目录</span></span><br><span class="line">      <span class="string">'node_modules'</span>,</span><br><span class="line">      path.resolve(__dirname, <span class="string">'app'</span>)</span><br><span class="line">    ],</span><br><span class="line">    extensions: [<span class="string">'.js'</span>, <span class="string">'.json'</span>, <span class="string">'.jsx'</span>, <span class="string">'.css'</span>], <span class="comment">// 模块的后缀名</span></span><br><span class="line">    alias: &#123; <span class="comment">// 模块别名配置，用于映射模块</span></span><br><span class="line">       <span class="comment">// 把 'module' 映射 'new-module'，同样的 'module/path/file' 也会被映射成 'new-module/path/file'</span></span><br><span class="line">      <span class="string">'module'</span>: <span class="string">'new-module'</span>,</span><br><span class="line">      <span class="comment">// 使用结尾符号 $ 后，把 'only-module' 映射成 'new-module'，</span></span><br><span class="line">      <span class="comment">// 但是不像上面的，'module/path/file' 不会被映射成 'new-module/path/file'</span></span><br><span class="line">      <span class="string">'only-module$'</span>: <span class="string">'new-module'</span>, </span><br><span class="line">    &#125;,</span><br><span class="line">    alias: [ <span class="comment">// alias 还支持使用数组来更详细的配置</span></span><br><span class="line">      &#123;</span><br><span class="line">        name: <span class="string">'module'</span>, <span class="comment">// 老的模块</span></span><br><span class="line">        alias: <span class="string">'new-module'</span>, <span class="comment">// 新的模块</span></span><br><span class="line">        <span class="comment">// 是否是只映射模块，如果是 true 只有 'module' 会被映射，如果是 false 'module/inner/path' 也会被映射</span></span><br><span class="line">        onlyModule: <span class="literal">true</span>, </span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    symlinks: <span class="literal">true</span>, <span class="comment">// 是否跟随文件软链接去搜寻模块的路径</span></span><br><span class="line">    descriptionFiles: [<span class="string">'package.json'</span>], <span class="comment">// 模块的描述文件</span></span><br><span class="line">    mainFields: [<span class="string">'main'</span>], <span class="comment">// 模块的描述文件里的描述入口的文件的字段名称</span></span><br><span class="line">    enforceExtension: <span class="literal">false</span>, <span class="comment">// 是否强制导入语句必须要写明文件后缀</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 输出文件性能检查配置</span></span><br><span class="line">  performance: &#123; </span><br><span class="line">    hints: <span class="string">'warning'</span>, <span class="comment">// 有性能问题时输出警告</span></span><br><span class="line">    hints: <span class="string">'error'</span>, <span class="comment">// 有性能问题时输出错误</span></span><br><span class="line">    hints: <span class="literal">false</span>, <span class="comment">// 关闭性能检查</span></span><br><span class="line">    maxAssetSize: <span class="number">200000</span>, <span class="comment">// 最大文件大小 (单位 bytes)</span></span><br><span class="line">    maxEntrypointSize: <span class="number">400000</span>, <span class="comment">// 最大入口文件大小 (单位 bytes)</span></span><br><span class="line">    assetFilter: <span class="function"><span class="keyword">function</span>(<span class="params">assetFilename</span>) </span>&#123; <span class="comment">// 过滤要检查的文件</span></span><br><span class="line">      <span class="keyword">return</span> assetFilename.endsWith(<span class="string">'.css'</span>) || assetFilename.endsWith(<span class="string">'.js'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  devtool: <span class="string">'source-map'</span>, <span class="comment">// 配置 source-map 类型</span></span><br><span class="line"></span><br><span class="line">  context: __dirname, <span class="comment">// Webpack 使用的根目录，string 类型必须是绝对路径</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 配置输出代码的运行环境</span></span><br><span class="line">  target: <span class="string">'web'</span>, <span class="comment">// 浏览器，默认</span></span><br><span class="line">  target: <span class="string">'webworker'</span>, <span class="comment">// WebWorker</span></span><br><span class="line">  target: <span class="string">'node'</span>, <span class="comment">// Node.js，使用 `require` 语句加载 Chunk 代码</span></span><br><span class="line">  target: <span class="string">'async-node'</span>, <span class="comment">// Node.js，异步加载 Chunk 代码</span></span><br><span class="line">  target: <span class="string">'node-webkit'</span>, <span class="comment">// nw.js</span></span><br><span class="line">  target: <span class="string">'electron-main'</span>, <span class="comment">// electron, 主线程</span></span><br><span class="line">  target: <span class="string">'electron-renderer'</span>, <span class="comment">// electron, 渲染线程</span></span><br><span class="line"></span><br><span class="line">  externals: &#123; <span class="comment">// 使用来自 JavaScript 运行环境提供的全局变量</span></span><br><span class="line">    jquery: <span class="string">'jQuery'</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  stats: &#123; <span class="comment">// 控制台输出日志控制</span></span><br><span class="line">    assets: <span class="literal">true</span>,</span><br><span class="line">    colors: <span class="literal">true</span>,</span><br><span class="line">    errors: <span class="literal">true</span>,</span><br><span class="line">    errorDetails: <span class="literal">true</span>,</span><br><span class="line">    hash: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  devServer: &#123; <span class="comment">// DevServer 相关的配置</span></span><br><span class="line">    proxy: &#123; <span class="comment">// 代理到后端服务接口</span></span><br><span class="line">      <span class="string">'/api'</span>: <span class="string">'http://localhost:3000'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    contentBase: path.join(__dirname, <span class="string">'public'</span>), <span class="comment">// 配置 DevServer HTTP 服务器的文件根目录</span></span><br><span class="line">    compress: <span class="literal">true</span>, <span class="comment">// 是否开启 gzip 压缩</span></span><br><span class="line">    historyApiFallback: <span class="literal">true</span>, <span class="comment">// 是否开发 HTML5 History API 网页</span></span><br><span class="line">    hot: <span class="literal">true</span>, <span class="comment">// 是否开启模块热替换功能</span></span><br><span class="line">    https: <span class="literal">false</span>, <span class="comment">// 是否开启 HTTPS 模式</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    profile: <span class="literal">true</span>, <span class="comment">// 是否捕捉 Webpack 构建的性能信息，用于分析什么原因导致构建性能不佳</span></span><br><span class="line"></span><br><span class="line">    cache: <span class="literal">false</span>, <span class="comment">// 是否启用缓存提升构建速度</span></span><br><span class="line"></span><br><span class="line">    watch: <span class="literal">true</span>, <span class="comment">// 是否开始</span></span><br><span class="line">    watchOptions: &#123; <span class="comment">// 监听模式选项</span></span><br><span class="line">    <span class="comment">// 不监听的文件或文件夹，支持正则匹配。默认为空</span></span><br><span class="line">    ignored: <span class="regexp">/node_modules/</span>,</span><br><span class="line">    <span class="comment">// 监听到变化发生后会等300ms再去执行动作，防止文件更新太快导致重新编译频率太高</span></span><br><span class="line">    <span class="comment">// 默认为300ms </span></span><br><span class="line">    aggregateTimeout: <span class="number">300</span>,</span><br><span class="line">    <span class="comment">// 判断文件是否发生变化是不停的去询问系统指定文件有没有变化，默认每隔1000毫秒询问一次</span></span><br><span class="line">    poll: <span class="number">1000</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;模块化&quot;&gt;&lt;a href=&quot;#模块化&quot; class=&quot;headerlink&quot; title=&quot;模块化&quot;&gt;&lt;/a&gt;模块化&lt;/h3&gt;&lt;h4 id=&quot;commonjsJs&quot;&gt;&lt;a href=&quot;#commonjsJs&quot; class=&quot;headerlink&quot; title=&quot;c
      
    
    </summary>
    
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Ajax</title>
    <link href="http://yoursite.com/2020/03/20/Ajax/"/>
    <id>http://yoursite.com/2020/03/20/Ajax/</id>
    <published>2020-03-20T02:38:40.000Z</published>
    <updated>2020-03-20T07:34:57.441Z</updated>
    
    <content type="html"><![CDATA[<h3 id="AJAX-Asynchronous-JavaScript-and-XML（异步的-JavaScript-和-XML）。"><a href="#AJAX-Asynchronous-JavaScript-and-XML（异步的-JavaScript-和-XML）。" class="headerlink" title="AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。"></a>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</h3><h3 id="AJAX-用于和服务器交换数据，是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。"><a href="#AJAX-用于和服务器交换数据，是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。" class="headerlink" title="AJAX 用于和服务器交换数据，是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。"></a>AJAX 用于和服务器交换数据，是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</h3><h3 id="XMLHttpRequest-对象-是-AJAX-的基础"><a href="#XMLHttpRequest-对象-是-AJAX-的基础" class="headerlink" title="XMLHttpRequest 对象 是 AJAX 的基础"></a>XMLHttpRequest 对象 是 AJAX 的基础</h3><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xmlhttp = <span class="keyword">new</span> XMLHttpRequest(); <span class="comment">// ie 6以上</span></span><br><span class="line"><span class="keyword">var</span> xmlhttp =<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>); <span class="comment">// ie5 ie6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 规定请求的类型、URL 以及是否异步处理请求。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Sting&#125;</span> </span>method：请求的类型；GET 或 POST</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Sting&#125;</span> </span>url：文件在服务器上的位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Boolean&#125;</span> </span>async：true（异步）或 false（同步）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">xmlhttp.open(method,url,<span class="keyword">async</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 将请求发送到服务器。。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Sting&#125;</span> </span>仅用于 POST 请求</span></span><br><span class="line"><span class="comment"> * /</span></span><br><span class="line"><span class="comment">xmlhttp.send(string)</span></span><br></pre></td></tr></table></figure><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"demo_get2.asp?fname=Bill&amp;lname=Gates"</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send();</span><br><span class="line"></span><br><span class="line">xmlhttp.open(<span class="string">"POST"</span>,<span class="string">"ajax_test.asp"</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.setRequestHeader(<span class="string">"Content-type"</span>,<span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">xmlhttp.send(<span class="string">"fname=Bill&amp;lname=Gates"</span>);</span><br></pre></td></tr></table></figure><p></p><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 向请求添加 HTTP 头。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;type&#125;</span> </span>header: 规定头的名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;type&#125;</span> </span>value: 规定头的值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">setRequestHeader(header,value)</span><br></pre></td></tr></table></figure><p></p><h3 id="响应处理"><a href="#响应处理" class="headerlink" title="响应处理"></a>响应处理</h3><p>onreadystatechange 事件，存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。<br>获得来自服务器的响应，请使用 XMLHttpRequest 对象的 responseText 或 responseXML 属性。</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>responseText</td><td>获得字符串形式的响应数据。</td></tr><tr><td>responseXML</td><td>获得 XML 形式的响应数据。</td></tr><tr><td>readyState</td><td>存有 XMLHttpRequest 的状态。 <br/>从 0 到 4 发生变化。<br/>0: 请求未初始化<br/>1: 服务器连接已建立<br/>2: 请求已接收<br/>3: 请求处理中<br/>4: 请求已完成，且响应已就绪</td></tr><tr><td>status</td><td>200: “OK” 404: 未找到页面</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//async=true 时 请规定在响应处于 onreadystatechange 事件中的就绪状态时执行的函数</span></span><br><span class="line">Async = <span class="literal">true</span></span><br><span class="line">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML=xmlhttp.responseText;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"test1.txt"</span>,<span class="literal">true</span>);</span><br><span class="line">xmlhttp.send();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Async = false 不要编写 onreadystatechange 函数 - 把代码放到 send() 语句后面即可</span></span><br><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"test1.txt"</span>,<span class="literal">false</span>);</span><br><span class="line">xmlhttp.send();</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML=xmlhttp.responseText;</span><br></pre></td></tr></table></figure><h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ajax = <span class="function"><span class="keyword">function</span>（<span class="title">options</span> = </span>&#123;&#125;） &#123;</span><br><span class="line">    options.type = ( options.type || <span class="string">'GET'</span> ).toUpperCase();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> data = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i  <span class="keyword">in</span> options.data) &#123;</span><br><span class="line">      data.push(<span class="built_in">encodeURIComponent</span>(i) + <span class="string">"="</span> + <span class="built_in">encodeURIComponent</span>(otions.data[i]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data = data.join(<span class="string">'&amp;'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.onreadstatechange = <span class="function"><span class="keyword">function</span>（） </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>（xhr.readyState === <span class="number">4</span>）&#123;</span><br><span class="line">            <span class="keyword">const</span> status = xhr.status;</span><br><span class="line">            <span class="keyword">if</span> (status &gt;= <span class="number">200</span> &amp;&amp; status &lt;<span class="number">300</span>) &#123;</span><br><span class="line">                options.success &amp;&amp; options.success(<span class="built_in">JSON</span>.parse(xhr.responseText), xhr.responseXML);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                option.error &amp;&amp; options.error(status);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (options.type === <span class="string">'GET'</span>) &#123;</span><br><span class="line">        xhr.open(<span class="string">'GET'</span>, options.url + <span class="string">'?'</span> + data, <span class="literal">true</span>);</span><br><span class="line">        xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-foem-urlencoded'</span>);</span><br><span class="line">        xhr.send(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p></p><h4 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Ajax 封装</span></span><br><span class="line"><span class="keyword">var</span> isrequesting = <span class="literal">false</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">action, data, successcallback, errorcallback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isrequesting) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    isrequesting = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: action,</span><br><span class="line">            type: <span class="string">"post"</span>,</span><br><span class="line">            dataType: <span class="string">"json"</span>,</span><br><span class="line">            data: data,</span><br><span class="line">            error: <span class="function"><span class="keyword">function</span> (<span class="params">ex, b, c</span>) </span>&#123;</span><br><span class="line">                isrequesting = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (errorcallback) &#123;</span><br><span class="line">                    errorcallback(ex, b, c);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                isrequesting = <span class="literal">false</span>;</span><br><span class="line">                successcallback(data);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">        isrequesting = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;AJAX-Asynchronous-JavaScript-and-XML（异步的-JavaScript-和-XML）。&quot;&gt;&lt;a href=&quot;#AJAX-Asynchronous-JavaScript-and-XML（异步的-JavaScript-和-XML）。&quot; 
      
    
    </summary>
    
    
    
      <category term="Ajax" scheme="http://yoursite.com/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>vue项目接入sentry</title>
    <link href="http://yoursite.com/2020/03/19/vue%E9%A1%B9%E7%9B%AE%E6%8E%A5%E5%85%A5sentry/"/>
    <id>http://yoursite.com/2020/03/19/vue%E9%A1%B9%E7%9B%AE%E6%8E%A5%E5%85%A5sentry/</id>
    <published>2020-03-19T14:53:52.000Z</published>
    <updated>2020-03-23T03:41:11.476Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  为了自主监听前端项目在测试和运行中出现的错误，达到高校定位问题所在，完善和修复项目开发中没有周全考虑的问题等产生的bug。<br>  Points：主动 纠错 定位 修复</p><h1 id="1-sentry-注册-amp-添加sentry项目"><a href="#1-sentry-注册-amp-添加sentry项目" class="headerlink" title="1.sentry 注册 &amp; 添加sentry项目"></a>1.sentry 注册 &amp; 添加sentry项目</h1><p>  注册<br>  添加sentry项目<br>  登陆sentry - create projiect - browsers - vue.js</p><h1 id="2-vue项目安装插件"><a href="#2-vue项目安装插件" class="headerlink" title="2.vue项目安装插件"></a>2.vue项目安装插件</h1><pre><code>npm install @sentry/browsernpm install @sentry/integrations</code></pre><h1 id="3-vue-项目引入"><a href="#3-vue-项目引入" class="headerlink" title="3.vue 项目引入"></a>3.vue 项目引入</h1><pre><code>import * as Sentry from &apos;@sentry/browser&apos;;import * as Integrations from &apos;@sentry/integrations&apos;;Sentry.init({dsn: &apos;https://9257bb5c60814f518e012fb3d0e9dda6@sentry.io/4320951&apos;, // 不同的项目dsn不同integrations: [new Integrations.Vue({Vue, attachProps: true // 是否上报组件的 props})],});    </code></pre><h1 id="4-其他设置"><a href="#4-其他设置" class="headerlink" title="4.其他设置"></a>4.其他设置</h1><h2 id="仅仅设置生产环境才上传错误"><a href="#仅仅设置生产环境才上传错误" class="headerlink" title="仅仅设置生产环境才上传错误"></a>仅仅设置生产环境才上传错误</h2><p>使用 process.env.NODE_ENV === ‘product’ 判断</p><h2 id="接入后浏览器控制器没有任何报错"><a href="#接入后浏览器控制器没有任何报错" class="headerlink" title="接入后浏览器控制器没有任何报错"></a>接入后浏览器控制器没有任何报错</h2><p>设置 logErrors: true，本地控制台会像正常报错，否则上传错误而不报错。</p><h2 id="vue项目上传的错误信息是压缩后的"><a href="#vue项目上传的错误信息是压缩后的" class="headerlink" title="vue项目上传的错误信息是压缩后的"></a>vue项目上传的错误信息是压缩后的</h2><p><a href="https://docs.sentry.io/platforms/javascript/sourcemaps/" target="_blank" rel="noopener">sentry官网</a> 这里有说解决指引,建议来这里看看啦</p><pre><code>If you are uploading source map artifacts yourself, you must specify the release in your SDK. Sentry will use the release name to associate digested event data with the files you’ve uploaded via the releases API, sentry-cli or sentry-webpack-plugin. This step is optional if you are hosting source maps on the remote server.</code></pre><p>上传source-map 解决思路:通过release name 和 sentry-cli or sentry-webpack-plugin 的上传进行关联</p><p> sentry-webpack-plugin</p><h3 id="1-在process定义一个release标识"><a href="#1-在process定义一个release标识" class="headerlink" title="1.在process定义一个release标识"></a>1.在process定义一个release标识</h3><p>例如：processenv.RELEASE_VERSION = new Date().getTime()。在vue-cli2.0版本里面，npm run build，执行 node build.js , 在这里添加这样的标识是不错的，当然啦在webpack.prod.conf.js里面添加也是可以的。</p><h3 id="2-引入插件"><a href="#2-引入插件" class="headerlink" title="2.引入插件"></a>2.引入插件</h3><pre><code>npm install --save-dev @sentry/webpack-pluginnpm install @sentry/webpack-plugin --only=dev</code></pre><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> SentryCliPlugin <span class="keyword">from</span> <span class="string">'@Sentry/webpack-plugin'</span></span><br><span class="line">plugins:[</span><br><span class="line">  <span class="keyword">new</span> SentryCliPlugin(&#123;</span><br><span class="line">      include: <span class="string">"./dist"</span>, <span class="comment">// 需要上传到sentry服务器的资源目录,会自动匹配js 以及map文件</span></span><br><span class="line">      release: process.env.RELEASE_VERSION, <span class="comment">// 版本号</span></span><br><span class="line">      configFile: <span class="string">"sentry.properties"</span>, <span class="comment">// 不用改</span></span><br><span class="line">      ignore: [<span class="string">'node_modules'</span>, <span class="string">'webpack.config.js'</span>],</span><br><span class="line">      urlPrefix: <span class="string">"~/static/"</span>  <span class="comment">// 线上对应的url资源的相对路径，打包后默认在dist，并且里面包含 index.html 和 static 文件夹放置静态资源</span></span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="3-sentry-init-添加版本"><a href="#3-sentry-init-添加版本" class="headerlink" title="3.sentry init 添加版本"></a>3.sentry init 添加版本</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Sentry.init(&#123;</span><br><span class="line">  release: processenv.RELEASE_VERSION</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;  为了自主监听前端项目在测试和运行中出现的错误，达到高校定位问题所在，完善和修复项目开发中没有周全考虑的问题等产生的bug。&lt;br&gt;  P
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
      <category term="sentry" scheme="http://yoursite.com/categories/vue/sentry/"/>
    
    
  </entry>
  
  <entry>
    <title>常用的页面效果实现</title>
    <link href="http://yoursite.com/2020/03/19/%E5%B8%B8%E7%94%A8%E7%9A%84%E9%A1%B5%E9%9D%A2%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2020/03/19/%E5%B8%B8%E7%94%A8%E7%9A%84%E9%A1%B5%E9%9D%A2%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0/</id>
    <published>2020-03-19T14:48:24.000Z</published>
    <updated>2020-03-19T14:51:52.733Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文字"><a href="#文字" class="headerlink" title="文字"></a>文字</h2><h3 id="1-段落文字除了最后一行左对齐，-其余两端对齐"><a href="#1-段落文字除了最后一行左对齐，-其余两端对齐" class="headerlink" title="1. 段落文字除了最后一行左对齐， 其余两端对齐"></a>1. 段落文字除了最后一行左对齐， 其余两端对齐</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>:justify;</span><br><span class="line">     <span class="attribute">text-justify</span>:inter-ideograph;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="2-文字超长省略"><a href="#2-文字超长省略" class="headerlink" title="2.文字超长省略"></a>2.文字超长省略</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.limit-text</span> &#123;</span><br><span class="line">   <span class="attribute">max-width</span>:<span class="number">1rem</span>; <span class="comment">/* 宽度必须 */</span></span><br><span class="line">   <span class="attribute">overflow</span>: hidden;</span><br><span class="line">   <span class="attribute">white-space</span>:nowrap;</span><br><span class="line">   <span class="attribute">text-overflow</span>:ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="3-多行超出省略"><a href="#3-多行超出省略" class="headerlink" title="3.多行超出省略"></a>3.多行超出省略</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.mult-limit-tetx</span> &#123;</span><br><span class="line">    <span class="comment">/*font-size: 0.28rem;*/</span></span><br><span class="line">    <span class="comment">/*width: 6.2rem;*/</span></span><br><span class="line">    <span class="comment">/*height: 5rem; */</span></span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">    <span class="attribute">-webkit-line-clamp</span>: <span class="number">2</span>;</span><br><span class="line">    <span class="attribute">-webkit-box-orient</span>: vertical;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;文字&quot;&gt;&lt;a href=&quot;#文字&quot; class=&quot;headerlink&quot; title=&quot;文字&quot;&gt;&lt;/a&gt;文字&lt;/h2&gt;&lt;h3 id=&quot;1-段落文字除了最后一行左对齐，-其余两端对齐&quot;&gt;&lt;a href=&quot;#1-段落文字除了最后一行左对齐，-其余两端对齐&quot; class
      
    
    </summary>
    
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
    
  </entry>
  
  <entry>
    <title>nodejs</title>
    <link href="http://yoursite.com/2020/03/19/nodejs/"/>
    <id>http://yoursite.com/2020/03/19/nodejs/</id>
    <published>2020-03-19T14:42:24.000Z</published>
    <updated>2020-03-21T14:47:37.904Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-简介认识"><a href="#1-简介认识" class="headerlink" title="1.简介认识"></a>1.简介认识</h2><pre><code>nodejs就是这个解释器（他不是一个语言）让javascript运行在服务端的开发平台（js运行环境）【Node.js给了javascript在服务器端运行环境，能在服务器运行】是一个基于 Chrome V8 引擎的 JavaScript 运行环境。内核是用了chrome的V8引擎。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型。是一个服务器程序。</code></pre><p>  优势：</p><p>处理大流量数据<br>特别适合实时应用<br>完美支持对象型数据库<br>异步处理大量并发连接</p><h2 id="2-Node-js-应用是由哪几部分组成的："><a href="#2-Node-js-应用是由哪几部分组成的：" class="headerlink" title="2.Node.js 应用是由哪几部分组成的："></a>2.Node.js 应用是由哪几部分组成的：</h2><p>引入 required 模块：我们可以使用 require 指令来载入 Node.js 模块。(自带http模块)</p><p>创建服务器：服务器可以监听客户端的请求，类似于 Apache 、Nginx 等 HTTP 服务器。</p><p>接收请求与响应请求 服务器很容易创建，客户端可以使用浏览器或终端发送 HTTP 请求，服务器接收请求后返回响应数据。</p><h3 id="3-npm-install-安装包"><a href="#3-npm-install-安装包" class="headerlink" title="3.npm install 安装包"></a>3.npm install 安装包</h3><p>npm install XX ，并且还会生成package.json，并将安装包信息记录在devDependencies或dependencies</p><h3 id="4-npm-init-生成package-json-用来记录这个项目的详细信息的；创建npm-项目"><a href="#4-npm-init-生成package-json-用来记录这个项目的详细信息的；创建npm-项目" class="headerlink" title="4.npm init 生成package.json,用来记录这个项目的详细信息的；创建npm 项目"></a>4.npm init 生成package.json,用来记录这个项目的详细信息的；创建npm 项目</h3><h3 id="5-node事件循环"><a href="#5-node事件循环" class="headerlink" title="5.node事件循环"></a>5.node事件循环</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-简介认识&quot;&gt;&lt;a href=&quot;#1-简介认识&quot; class=&quot;headerlink&quot; title=&quot;1.简介认识&quot;&gt;&lt;/a&gt;1.简介认识&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;nodejs就是这个解释器（他不是一个语言）

让javascript运行在服务端的开发平台
      
    
    </summary>
    
    
      <category term="nodejs" scheme="http://yoursite.com/categories/nodejs/"/>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>http</title>
    <link href="http://yoursite.com/2020/03/19/http/"/>
    <id>http://yoursite.com/2020/03/19/http/</id>
    <published>2020-03-19T14:10:58.000Z</published>
    <updated>2020-03-19T14:44:53.252Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-一次完整的HTTP事务流程"><a href="#1-一次完整的HTTP事务流程" class="headerlink" title="1.一次完整的HTTP事务流程"></a>1.一次完整的HTTP事务流程</h3><p>（1）域名解析【网址到IP地址的转换】【DNS解析浏览器缓存-系统缓存【host文件】- 路由器缓存-ISP（服务提供商）DNS缓存本地域名服务器-根域名服务器-顶级域名服务器-主域名服务器】</p><p>（2）发起TCP的三次握手</p><p>（3）建立TCP连接后发起http请求</p><p>（4）服务器响应http请求，浏览器得到HTML代码</p><p>（5）浏览器解析HTML代码，并请求HTML代码中的资源</p><p>（6）浏览器对页面进行渲染呈现给用户</p><p>（7）连接结束</p><h3 id="2-HTTP状态码"><a href="#2-HTTP状态码" class="headerlink" title="2.HTTP状态码"></a>2.HTTP状态码</h3><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>（1）1**：信息，服务器收到请求，需要请求者继续执行操作</p><p>（2）2**：成功，操作被成功接收并处理</p><p>（3）3**：重定向，需要进一步的操作以完成请求</p><p>（4）4**：客户端错误，请求包含语法错误或者无法完成请求</p><p>（5）5**：服务器错误，服务器在处理请求的过程中发生了错误</p><h4 id="常见的HTTP状态码："><a href="#常见的HTTP状态码：" class="headerlink" title="常见的HTTP状态码："></a>常见的HTTP状态码：</h4><p>200——OK，请求成功<br>301——Moved Permanently，资源（网页等）被永久转移到其他URL<br>302——Found，307——Temporary Redirect，临时重定向，请求的文档被临时移动到别处<br>304——Not Modified，未修改，表示客户端缓存的版本是最近的<br>401——Unauthorized，请求要求用户的身份认证<br>403——Forbidden，禁止，服务器理解客户端请求，但是拒绝处理此请求，通常是权限设置所致<br>404——Not Found，请求的资源（网页等）不存在<br>500——Internal Server Error——内部服务器错误<br>502——Bad Gateway，充当网关或代理的服务器从远端服务器接收到了一个无效的请求<br>504——Gateway Time-out，充当网关或代理的服务器，未及时从远端服务器获取请求</p><h3 id="3-浏览器同源策略"><a href="#3-浏览器同源策略" class="headerlink" title="3.浏览器同源策略"></a>3.浏览器同源策略</h3><p>（1）“同源策略”三个相同”：</p><p>协议相同<br>域名相同<br>端口相同<br>（2）同源策略的目的是为了保证用户信息的安全，防止恶意的网站窃取数据。不同源的客户端脚本在没有明确授权的情况下，不能读写对方的资源。</p><p>（3）如果非同源，共有三种行为受到限制：</p><p>Cookie、LocalStorage和IndexDB无法读取<br>DOM无法获得<br>AJAX请求不能发送</p><p>（4）不受同源策略限制的：</p><p>页面中的链接，重定向以及表单提交<br>跨域资源的引入是可以的，但是js不能读写加载的内容。如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src&#x3D;...&#x2F;&gt;&lt;&#x2F;script&gt;，&lt;img&gt;，&lt;link&gt;，&lt;iframe&gt;</span><br></pre></td></tr></table></figure><h3 id="4-跨域"><a href="#4-跨域" class="headerlink" title="4.跨域"></a>4.跨域</h3><p>（1）受同源策略的限制，不是同源的脚本不能操作其他源下面的对象。想要操作另一个源下的对象，就需要跨域。</p><p>（2）跨域的实现方式</p><p>降域 document.domain<br>设置窗口片段标识符，监听读取location.hash<br>window.name<br>HTML5的postMessage方法<br>LocalStorage<br>JSONP<br>WebSocket<br>CORS</p><h3 id="5-HTTP-amp-HTPPS"><a href="#5-HTTP-amp-HTPPS" class="headerlink" title="5.HTTP&amp; HTPPS"></a>5.HTTP&amp; HTPPS</h3><p>HTTPS在HTTP的基础上加入了SSL/TLS，依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。SSL（Secure Socket Layer，安全套接层），TLS（Transport Layer Securit，传输层安全协议）</p><p>（1）HTTPS协议需要CA申请证书，一般免费证书比较少，所以需要一定费用</p><p>（2）HTTP是超文本传输协议，信息是明文传输，HTTPS则是具有安全性的SSL加密传输协议</p><p>（3）HTTP和HTTPS使用的是完全不同的连接方式，使用的端口号也不一样，前者是80，后者是443</p><p>（4）HTTP连接很简单无连接，是无状态的；HTTPS协议是由HTTP+SSL协议构建的可进行加密传输、身份认证的网络协议，比较安全。</p><p>（5）谷歌搜索引擎算法中，比起同等HTTP网站，采用HTTPS加密的网站在搜索结果中排名会更高</p><h3 id="6-图解http"><a href="#6-图解http" class="headerlink" title="6.图解http"></a>6.<a href="https://www.processon.com/view/link/58025201e4b0d6b27dd4c8af#map" target="_blank" rel="noopener">图解http</a></h3><h3 id="7-GET-与-POST-对比"><a href="#7-GET-与-POST-对比" class="headerlink" title="7.GET 与 POST 对比"></a>7.GET 与 POST 对比</h3><p>http 响应报文<br>三部分组成： 状态行、响应头(Response Header)、响应正文</p><p>1.http URL：<br>GET http URL 的长度有限制（3k）;<br>POST http URL 的长度没有限制，需要制定传输类型，请求头多了content-Type 和 Content-Length</p><p>2.请求信息：<br>GET 请求信息在 URL 里<br>POST 请求信息在 请求body 里</p><p>3.post  请求数据格式</p><p>content-type:application/x-www-form-urlencoded 【form表单默认的数据格式】 按key1=val1&amp;key2=val2URL 转码    Query String Parameters </p><p>content-type: application/json     请求数据格式必须是json（用JSON.stringfy处理过的   Request Payload  （会有{}）</p><p>content-type: multipart/form-data 用于表单上传，多用于上传文件  Form Data</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-一次完整的HTTP事务流程&quot;&gt;&lt;a href=&quot;#1-一次完整的HTTP事务流程&quot; class=&quot;headerlink&quot; title=&quot;1.一次完整的HTTP事务流程&quot;&gt;&lt;/a&gt;1.一次完整的HTTP事务流程&lt;/h3&gt;&lt;p&gt;（1）域名解析【网址到IP地址的转换
      
    
    </summary>
    
    
      <category term="http" scheme="http://yoursite.com/categories/http/"/>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>vue渲染函数&amp;jsx</title>
    <link href="http://yoursite.com/2020/03/19/vue%E6%B8%B2%E6%9F%93%E5%87%BD%E6%95%B0-jsx/"/>
    <id>http://yoursite.com/2020/03/19/vue%E6%B8%B2%E6%9F%93%E5%87%BD%E6%95%B0-jsx/</id>
    <published>2020-03-19T11:59:48.000Z</published>
    <updated>2020-03-19T14:44:53.261Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue渲染函数-amp-jsx"><a href="#Vue渲染函数-amp-jsx" class="headerlink" title="Vue渲染函数 &amp; jsx"></a>Vue渲染函数 &amp; jsx</h1><h2 id="vue关于渲染几个概念理解"><a href="#vue关于渲染几个概念理解" class="headerlink" title="vue关于渲染几个概念理解"></a>vue关于渲染几个概念理解</h2><h3 id="1-节点"><a href="#1-节点" class="headerlink" title="1.节点"></a>1.节点</h3><h3 id="2-树-DOM树"><a href="#2-树-DOM树" class="headerlink" title="2.树[DOM树]"></a>2.树[DOM树]</h3><h3 id="3-虚拟节点Vnode"><a href="#3-虚拟节点Vnode" class="headerlink" title="3.虚拟节点Vnode"></a>3.虚拟节点Vnode</h3><h2 id="渲染函数"><a href="#渲染函数" class="headerlink" title="渲染函数"></a>渲染函数</h2><p>createEleme方法实质是创建节点描述 [createNodeDescription]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @returns &#123;VNode&#125; 虚拟节点</span></span><br><span class="line">createElement(</span><br><span class="line">  <span class="comment">// 参数1</span></span><br><span class="line">  <span class="comment">// &#123;String | Object | Function&#125;</span></span><br><span class="line">  <span class="comment">// 一个 HTML 标签字符串，组件选项对象，或者</span></span><br><span class="line">  <span class="comment">// 解析上述任何一种的一个 async 异步函数，必要参数。</span></span><br><span class="line"></span><br><span class="line">  <span class="string">'div'</span>,</span><br><span class="line">  <span class="comment">// 参数2</span></span><br><span class="line">  <span class="comment">// &#123;Object&#125;</span></span><br><span class="line">  <span class="comment">// 一个包含模板相关属性的数据对象</span></span><br><span class="line">  <span class="comment">// 这样，您可以在 template 中使用这些属性。可选参数。</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// (详情见下一节)</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 参数3</span></span><br><span class="line">  <span class="comment">// &#123;String | Array&#125;</span></span><br><span class="line">  <span class="comment">// 子节点 (VNodes)，由 `createElement()` 构建而成，</span></span><br><span class="line">  <span class="comment">// 或使用字符串来生成“文本节点”。可选参数。</span></span><br><span class="line">  [</span><br><span class="line">    <span class="string">'先写一些文字'</span>,</span><br><span class="line">    createElement(<span class="string">'h1'</span>, <span class="string">'一则头条'</span>),</span><br><span class="line">    createElement(MyComponent, &#123;</span><br><span class="line">      props: &#123;</span><br><span class="line">        someProp: <span class="string">'foobar'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>数据对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 和`v-bind:class`一样的 API</span></span><br><span class="line">  <span class="comment">// 接收一个字符串、对象或字符串和对象组成的数组</span></span><br><span class="line">  <span class="string">'class'</span>: &#123;</span><br><span class="line">    foo: <span class="literal">true</span>,</span><br><span class="line">    bar: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 和`v-bind:style`一样的 API</span></span><br><span class="line">  <span class="comment">// 接收一个字符串、对象或对象组成的数组</span></span><br><span class="line">  style: &#123;</span><br><span class="line">    color: <span class="string">'red'</span>,</span><br><span class="line">    fontSize: <span class="string">'14px'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 正常的 HTML 特性</span></span><br><span class="line">  attrs: &#123;</span><br><span class="line">    id: <span class="string">'foo'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 组件 props</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    myProp: <span class="string">'bar'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// DOM 属性</span></span><br><span class="line">  domProps: &#123;</span><br><span class="line">    innerHTML: <span class="string">'baz'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 事件监听器基于 `on`</span></span><br><span class="line">  <span class="comment">// 所以不再支持如 `v-on:keyup.enter` 修饰器</span></span><br><span class="line">  <span class="comment">// 需要手动匹配 keyCode。</span></span><br><span class="line">  on: &#123;</span><br><span class="line">    click: <span class="keyword">this</span>.clickHandler</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 仅对于组件，用于监听原生事件，而不是组件内部使用</span></span><br><span class="line">  <span class="comment">// `vm.$emit` 触发的事件。</span></span><br><span class="line">  nativeOn: &#123;</span><br><span class="line">    click: <span class="keyword">this</span>.nativeClickHandler</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 自定义指令。注意，你无法对 `binding` 中的 `oldValue`</span></span><br><span class="line">  <span class="comment">// 赋值，因为 Vue 已经自动为你进行了同步。</span></span><br><span class="line">  directives: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'my-custom-directive'</span>,</span><br><span class="line">      value: <span class="string">'2'</span>,</span><br><span class="line">      expression: <span class="string">'1 + 1'</span>,</span><br><span class="line">      arg: <span class="string">'foo'</span>,</span><br><span class="line">      modifiers: &#123;</span><br><span class="line">        bar: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 作用域插槽格式</span></span><br><span class="line">  <span class="comment">// &#123; name: props =&gt; VNode | Array&lt;VNode&gt; &#125;</span></span><br><span class="line">  scopedSlots: &#123;</span><br><span class="line">    <span class="keyword">default</span>: <span class="function"><span class="params">props</span> =&gt;</span> createElement(<span class="string">'span'</span>, props.text)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 如果组件是其他组件的子组件，需为插槽指定名称</span></span><br><span class="line">  slot: <span class="string">'name-of-slot'</span>,</span><br><span class="line">  <span class="comment">// 其他特殊顶层属性</span></span><br><span class="line">  key: <span class="string">'myKey'</span>,</span><br><span class="line">  ref: <span class="string">'myRef'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="jsx写法"><a href="#jsx写法" class="headerlink" title="jsx写法"></a>jsx写法</h2><p>React发明了JSX，利用HTML语法来创建虚拟DOM。当遇到 “&lt;”，JSX就当HTML解析，遇到 “{“ 就当JavaScript解析。 因此用一般模板写变量用 “{}”,中间是javascript表达式。特别注意render里面的指向问题！在组件里面使用也要带this的。</p><p><a href="https://github.com/vuejs/jsx#installation" target="_blank" rel="noopener">JSX 如何映射到 JavaScript</a></p><h3 id="vue如何支持jsx写法"><a href="#vue如何支持jsx写法" class="headerlink" title="vue如何支持jsx写法"></a>vue如何支持jsx写法</h3><p>在Vue 文件中引入 jsx 文件！ 需要配置webpack，令其支持处理jsx文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment">// 对src和test文件夹下的.js文件使用babel-loader将es6+的代码转成es5</span></span><br><span class="line">test: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">loader:<span class="string">'babel-loader'</span>,</span><br><span class="line">exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">include: [resolve(<span class="string">'src'</span>), resolve(<span class="string">'test'</span>), resolve(<span class="string">'node_modules/webpack-dev-server/client'</span>)],</span><br><span class="line">use: &#123;</span><br><span class="line">    loader:<span class="string">'babel-loader?cacheDirectory=true'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="1-基础使用"><a href="#1-基础使用" class="headerlink" title="1.基础使用"></a>1.基础使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vue.component(<span class="string">'jsxDemo'</span>, &#123;</span><br><span class="line">  render(h) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>jsxdemo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-v-if-v-else"><a href="#2-v-if-v-else" class="headerlink" title="2.v-if / v-else"></a>2.v-if / v-else</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 三元表达式写法</span></span><br><span class="line">vue.component(<span class="string">'jsxDemo'</span>, &#123;</span><br><span class="line">  render(h) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;a=== 1 ? 'a' : 'b'&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 复杂的</span></span><br><span class="line">vue.component(<span class="string">'jsxDemo'</span>, &#123;</span><br><span class="line">  render(h) &#123;</span><br><span class="line">    <span class="keyword">let</span> text</span><br><span class="line">    <span class="keyword">if</span> a === <span class="number">1</span> text = a</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> a === <span class="number">2</span> text = b</span><br><span class="line">    <span class="keyword">else</span> text = c</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        &lt;p&gt;&#123;text&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure><h3 id="3-v-for-（渲染重复的样式-转化为数组）"><a href="#3-v-for-（渲染重复的样式-转化为数组）" class="headerlink" title="3.v-for （渲染重复的样式,转化为数组）"></a>3.v-for （渲染重复的样式,转化为数组）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vue.component(<span class="string">'jsxDemo'</span>, &#123;</span><br><span class="line">  render(h) &#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [a, b, c]</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            <span class="keyword">this</span>.arr.map(<span class="function"><span class="params">i</span> =&gt;</span> (<span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;i&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>))</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure><h3 id="4-v-model-语法糖-即传值value-事件绑定input监听）"><a href="#4-v-model-语法糖-即传值value-事件绑定input监听）" class="headerlink" title="4.v-model 语法糖(即传值value+事件绑定input监听）)"></a>4.v-model 语法糖(即传值value+事件绑定input监听）)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">vue.component(<span class="string">'jsxDemo'</span>, &#123;</span><br><span class="line">data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        text: <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">methods:&#123;</span><br><span class="line">    input(e)&#123;</span><br><span class="line">        <span class="keyword">this</span>.text=e.target.value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">render()&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;input type=<span class="string">"text"</span> value=&#123;<span class="keyword">this</span>.text&#125; onInput=&#123;<span class="keyword">this</span>.input&#125;/&gt;</span><br><span class="line">            &lt;p&gt;&#123;<span class="keyword">this</span>.text&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="5-自定义组件-直接引入使用"><a href="#5-自定义组件-直接引入使用" class="headerlink" title="5.自定义组件 直接引入使用"></a>5.自定义组件 直接引入使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> HelloWolrd <span class="keyword">from</span> <span class="string">'./HelloWorld'</span></span><br><span class="line">vue.component(<span class="string">'jsxDemo'</span>, &#123;</span><br><span class="line">  render(h) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;HelloWolrd/&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="6-事件-native-on-事件"><a href="#6-事件-native-on-事件" class="headerlink" title="6.事件 (native)on-事件"></a>6.事件 (native)on-事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vue.component(<span class="string">'jsxDemo'</span>, &#123;</span><br><span class="line">  render(h) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;el-button onClick=&#123;functionName&#125; nativeOnClick=&#123;functionName&#125; on-click=<span class="string">"functionName"</span>&gt;&lt;<span class="regexp">/el-button&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure><h3 id="7-class，-style"><a href="#7-class，-style" class="headerlink" title="7. class， style"></a>7. class， style</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vue.component(<span class="string">'jsxDemo'</span>, &#123;</span><br><span class="line">render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=&#123;&#123;<span class="attr">XX</span>:XX&#125;&#125; <span class="class"><span class="keyword">class</span></span>=&#123;[<span class="string">"XX1"</span>, &#123;<span class="string">"XXX3"</span>: <span class="literal">true</span>&#125;]&#125; style=&#123;&#123;<span class="attr">XXX</span>: XX&#125;&#125;&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure><h3 id="8-JSX中的函数式组件"><a href="#8-JSX中的函数式组件" class="headerlink" title="8.JSX中的函数式组件"></a>8.JSX中的函数式组件</h3><p><a href="https://juejin.im/post/5affa64df265da0b93488fdd#heading-9" target="_blank" rel="noopener" title="参考资料">jsx函数式组件</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line"><span class="comment">// context.data就是你在父组件给子组件增加的属性</span></span><br><span class="line"><span class="comment">//  ...省略无关代码</span></span><br><span class="line"> render()&#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;Item data=&#123;<span class="keyword">this</span>.data&#125; <span class="class"><span class="keyword">class</span></span>=<span class="string">"large"</span>/&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//Item.vue组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    functional:<span class="literal">true</span>,</span><br><span class="line">      name: <span class="string">"item"</span>,</span><br><span class="line">      render(h,context)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"red"</span> &#123;...context.data&#125;&gt;</span><br><span class="line">            &#123;context.props.data&#125;</span><br><span class="line">          &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br></pre></td></tr></table></figure><h3 id="9-slot-之深度复制"><a href="#9-slot-之深度复制" class="headerlink" title="9.slot 之深度复制"></a>9.slot 之深度复制</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">vnodes, createElement</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">cloneVNode</span> (<span class="params">vnode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> clonedChildren = vnode.children &amp;&amp; vnode.children.map(<span class="function"><span class="params">vnode</span> =&gt;</span> cloneVNode(vnode));</span><br><span class="line">    <span class="keyword">const</span> cloned = createElement(vnode.tag, vnode.data, clonedChildren);</span><br><span class="line">    cloned.text = vnode.text;</span><br><span class="line">    cloned.isComment = vnode.isComment;</span><br><span class="line">    cloned.componentOptions = vnode.componentOptions;</span><br><span class="line">    cloned.elm = vnode.elm;</span><br><span class="line">    cloned.context = vnode.context;</span><br><span class="line">    cloned.ns = vnode.ns;</span><br><span class="line">    cloned.isStatic = vnode.isStatic;</span><br><span class="line">    cloned.key = vnode.key;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cloned;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> clonedVNodes = vnodes.map(<span class="function"><span class="params">vnode</span> =&gt;</span> cloneVNode(vnode))</span><br><span class="line">  <span class="keyword">return</span> clonedVNodes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue渲染函数-amp-jsx&quot;&gt;&lt;a href=&quot;#Vue渲染函数-amp-jsx&quot; class=&quot;headerlink&quot; title=&quot;Vue渲染函数 &amp;amp; jsx&quot;&gt;&lt;/a&gt;Vue渲染函数 &amp;amp; jsx&lt;/h1&gt;&lt;h2 id=&quot;vue关于渲染几个
      
    
    </summary>
    
    
      <category term="vue" scheme="http://yoursite.com/categories/vue/"/>
    
      <category term="jsx" scheme="http://yoursite.com/categories/vue/jsx/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="jsx" scheme="http://yoursite.com/tags/jsx/"/>
    
  </entry>
  
</feed>
