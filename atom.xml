<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>珊珊的小本子</title>
  
  <subtitle>一个记满小鱼干的小本本</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-19T14:17:06.521Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yvoone</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>http</title>
    <link href="http://yoursite.com/2020/03/19/http/"/>
    <id>http://yoursite.com/2020/03/19/http/</id>
    <published>2020-03-19T14:10:58.000Z</published>
    <updated>2020-03-19T14:17:06.521Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-一次完整的HTTP事务流程"><a href="#1-一次完整的HTTP事务流程" class="headerlink" title="1.一次完整的HTTP事务流程"></a>1.一次完整的HTTP事务流程</h3><p>（1）域名解析【网址到IP地址的转换】【DNS解析浏览器缓存-系统缓存【host文件】- 路由器缓存-ISP（服务提供商）DNS缓存本地域名服务器-根域名服务器-顶级域名服务器-主域名服务器】</p><p>（2）发起TCP的三次握手</p><p>（3）建立TCP连接后发起http请求</p><p>（4）服务器响应http请求，浏览器得到HTML代码</p><p>（5）浏览器解析HTML代码，并请求HTML代码中的资源</p><p>（6）浏览器对页面进行渲染呈现给用户</p><p>（7）连接结束</p><h3 id="2-HTTP状态码"><a href="#2-HTTP状态码" class="headerlink" title="2.HTTP状态码"></a>2.HTTP状态码</h3><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>（1）1**：信息，服务器收到请求，需要请求者继续执行操作</p><p>（2）2**：成功，操作被成功接收并处理</p><p>（3）3**：重定向，需要进一步的操作以完成请求</p><p>（4）4**：客户端错误，请求包含语法错误或者无法完成请求</p><p>（5）5**：服务器错误，服务器在处理请求的过程中发生了错误</p><h4 id="常见的HTTP状态码："><a href="#常见的HTTP状态码：" class="headerlink" title="常见的HTTP状态码："></a>常见的HTTP状态码：</h4><p>200——OK，请求成功<br>301——Moved Permanently，资源（网页等）被永久转移到其他URL<br>302——Found，307——Temporary Redirect，临时重定向，请求的文档被临时移动到别处<br>304——Not Modified，未修改，表示客户端缓存的版本是最近的<br>401——Unauthorized，请求要求用户的身份认证<br>403——Forbidden，禁止，服务器理解客户端请求，但是拒绝处理此请求，通常是权限设置所致<br>404——Not Found，请求的资源（网页等）不存在<br>500——Internal Server Error——内部服务器错误<br>502——Bad Gateway，充当网关或代理的服务器从远端服务器接收到了一个无效的请求<br>504——Gateway Time-out，充当网关或代理的服务器，未及时从远端服务器获取请求</p><h3 id="3-浏览器同源策略"><a href="#3-浏览器同源策略" class="headerlink" title="3.浏览器同源策略"></a>3.浏览器同源策略</h3><p>（1）“同源策略”三个相同”：</p><p>协议相同<br>域名相同<br>端口相同<br>（2）同源策略的目的是为了保证用户信息的安全，防止恶意的网站窃取数据。不同源的客户端脚本在没有明确授权的情况下，不能读写对方的资源。</p><p>（3）如果非同源，共有三种行为受到限制：</p><p>Cookie、LocalStorage和IndexDB无法读取<br>DOM无法获得<br>AJAX请求不能发送</p><p>（4）不受同源策略限制的：</p><p>页面中的链接，重定向以及表单提交<br>跨域资源的引入是可以的，但是js不能读写加载的内容。如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src&#x3D;...&#x2F;&gt;&lt;&#x2F;script&gt;，&lt;img&gt;，&lt;link&gt;，&lt;iframe&gt;</span><br></pre></td></tr></table></figure><h3 id="4-跨域"><a href="#4-跨域" class="headerlink" title="4.跨域"></a>4.跨域</h3><p>（1）受同源策略的限制，不是同源的脚本不能操作其他源下面的对象。想要操作另一个源下的对象，就需要跨域。</p><p>（2）跨域的实现方式</p><p>降域 document.domain<br>设置窗口片段标识符，监听读取location.hash<br>window.name<br>HTML5的postMessage方法<br>LocalStorage<br>JSONP<br>WebSocket<br>CORS</p><h3 id="5-HTTP-amp-HTPPS"><a href="#5-HTTP-amp-HTPPS" class="headerlink" title="5.HTTP&amp; HTPPS"></a>5.HTTP&amp; HTPPS</h3><p>HTTPS在HTTP的基础上加入了SSL/TLS，依靠证书来验证服务器的身份，并为浏览器和服务器之间的通信加密。SSL（Secure Socket Layer，安全套接层），TLS（Transport Layer Securit，传输层安全协议）</p><p>（1）HTTPS协议需要CA申请证书，一般免费证书比较少，所以需要一定费用</p><p>（2）HTTP是超文本传输协议，信息是明文传输，HTTPS则是具有安全性的SSL加密传输协议</p><p>（3）HTTP和HTTPS使用的是完全不同的连接方式，使用的端口号也不一样，前者是80，后者是443</p><p>（4）HTTP连接很简单无连接，是无状态的；HTTPS协议是由HTTP+SSL协议构建的可进行加密传输、身份认证的网络协议，比较安全。</p><p>（5）谷歌搜索引擎算法中，比起同等HTTP网站，采用HTTPS加密的网站在搜索结果中排名会更高</p><h3 id="6-图解http"><a href="#6-图解http" class="headerlink" title="6.图解http"></a>6.<a href="https://www.processon.com/view/link/58025201e4b0d6b27dd4c8af#map" target="_blank" rel="noopener">图解http</a></h3><h3 id="7-GET-与-POST-对比"><a href="#7-GET-与-POST-对比" class="headerlink" title="7.GET 与 POST 对比"></a>7.GET 与 POST 对比</h3><p>http 响应报文<br>三部分组成： 状态行、响应头(Response Header)、响应正文</p><p>1.http URL：<br>GET http URL 的长度有限制（3k）;<br>POST http URL 的长度没有限制，需要制定传输类型，请求头多了content-Type 和 Content-Length</p><p>2.请求信息：<br>GET 请求信息在 URL 里<br>POST 请求信息在 请求body 里</p><p>3.post  请求数据格式</p><p>content-type:application/x-www-form-urlencoded 【form表单默认的数据格式】 按key1=val1&amp;key2=val2URL 转码    Query String Parameters </p><p>content-type: application/json     请求数据格式必须是json（用JSON.stringfy处理过的   Request Payload  （会有{}）</p><p>content-type: multipart/form-data 用于表单上传，多用于上传文件  Form Data</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-一次完整的HTTP事务流程&quot;&gt;&lt;a href=&quot;#1-一次完整的HTTP事务流程&quot; class=&quot;headerlink&quot; title=&quot;1.一次完整的HTTP事务流程&quot;&gt;&lt;/a&gt;1.一次完整的HTTP事务流程&lt;/h3&gt;&lt;p&gt;（1）域名解析【网址到IP地址的转换
      
    
    </summary>
    
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>vue渲染函数&amp;jsx</title>
    <link href="http://yoursite.com/2020/03/19/vue%E6%B8%B2%E6%9F%93%E5%87%BD%E6%95%B0-jsx/"/>
    <id>http://yoursite.com/2020/03/19/vue%E6%B8%B2%E6%9F%93%E5%87%BD%E6%95%B0-jsx/</id>
    <published>2020-03-19T11:59:48.000Z</published>
    <updated>2020-03-19T14:10:36.925Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vue渲染函数-amp-jsx"><a href="#Vue渲染函数-amp-jsx" class="headerlink" title="Vue渲染函数 &amp; jsx"></a>Vue渲染函数 &amp; jsx</h1><h2 id="vue关于渲染几个概念理解"><a href="#vue关于渲染几个概念理解" class="headerlink" title="vue关于渲染几个概念理解"></a>vue关于渲染几个概念理解</h2><h3 id="1-节点"><a href="#1-节点" class="headerlink" title="1.节点"></a>1.节点</h3><h3 id="2-树-DOM树"><a href="#2-树-DOM树" class="headerlink" title="2.树[DOM树]"></a>2.树[DOM树]</h3><h3 id="3-虚拟节点Vnode"><a href="#3-虚拟节点Vnode" class="headerlink" title="3.虚拟节点Vnode"></a>3.虚拟节点Vnode</h3><h2 id="渲染函数"><a href="#渲染函数" class="headerlink" title="渲染函数"></a>渲染函数</h2><p>createEleme方法实质是创建节点描述 [createNodeDescription]</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @returns &#123;VNode&#125; 虚拟节点</span></span><br><span class="line">createElement(</span><br><span class="line">  <span class="comment">// 参数1</span></span><br><span class="line">  <span class="comment">// &#123;String | Object | Function&#125;</span></span><br><span class="line">  <span class="comment">// 一个 HTML 标签字符串，组件选项对象，或者</span></span><br><span class="line">  <span class="comment">// 解析上述任何一种的一个 async 异步函数，必要参数。</span></span><br><span class="line"></span><br><span class="line">  <span class="string">'div'</span>,</span><br><span class="line">  <span class="comment">// 参数2</span></span><br><span class="line">  <span class="comment">// &#123;Object&#125;</span></span><br><span class="line">  <span class="comment">// 一个包含模板相关属性的数据对象</span></span><br><span class="line">  <span class="comment">// 这样，您可以在 template 中使用这些属性。可选参数。</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// (详情见下一节)</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 参数3</span></span><br><span class="line">  <span class="comment">// &#123;String | Array&#125;</span></span><br><span class="line">  <span class="comment">// 子节点 (VNodes)，由 `createElement()` 构建而成，</span></span><br><span class="line">  <span class="comment">// 或使用字符串来生成“文本节点”。可选参数。</span></span><br><span class="line">  [</span><br><span class="line">    <span class="string">'先写一些文字'</span>,</span><br><span class="line">    createElement(<span class="string">'h1'</span>, <span class="string">'一则头条'</span>),</span><br><span class="line">    createElement(MyComponent, &#123;</span><br><span class="line">      props: &#123;</span><br><span class="line">        someProp: <span class="string">'foobar'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>数据对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 和`v-bind:class`一样的 API</span></span><br><span class="line">  <span class="comment">// 接收一个字符串、对象或字符串和对象组成的数组</span></span><br><span class="line">  <span class="string">'class'</span>: &#123;</span><br><span class="line">    foo: <span class="literal">true</span>,</span><br><span class="line">    bar: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 和`v-bind:style`一样的 API</span></span><br><span class="line">  <span class="comment">// 接收一个字符串、对象或对象组成的数组</span></span><br><span class="line">  style: &#123;</span><br><span class="line">    color: <span class="string">'red'</span>,</span><br><span class="line">    fontSize: <span class="string">'14px'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 正常的 HTML 特性</span></span><br><span class="line">  attrs: &#123;</span><br><span class="line">    id: <span class="string">'foo'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 组件 props</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    myProp: <span class="string">'bar'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// DOM 属性</span></span><br><span class="line">  domProps: &#123;</span><br><span class="line">    innerHTML: <span class="string">'baz'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 事件监听器基于 `on`</span></span><br><span class="line">  <span class="comment">// 所以不再支持如 `v-on:keyup.enter` 修饰器</span></span><br><span class="line">  <span class="comment">// 需要手动匹配 keyCode。</span></span><br><span class="line">  on: &#123;</span><br><span class="line">    click: <span class="keyword">this</span>.clickHandler</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 仅对于组件，用于监听原生事件，而不是组件内部使用</span></span><br><span class="line">  <span class="comment">// `vm.$emit` 触发的事件。</span></span><br><span class="line">  nativeOn: &#123;</span><br><span class="line">    click: <span class="keyword">this</span>.nativeClickHandler</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 自定义指令。注意，你无法对 `binding` 中的 `oldValue`</span></span><br><span class="line">  <span class="comment">// 赋值，因为 Vue 已经自动为你进行了同步。</span></span><br><span class="line">  directives: [</span><br><span class="line">    &#123;</span><br><span class="line">      name: <span class="string">'my-custom-directive'</span>,</span><br><span class="line">      value: <span class="string">'2'</span>,</span><br><span class="line">      expression: <span class="string">'1 + 1'</span>,</span><br><span class="line">      arg: <span class="string">'foo'</span>,</span><br><span class="line">      modifiers: &#123;</span><br><span class="line">        bar: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 作用域插槽格式</span></span><br><span class="line">  <span class="comment">// &#123; name: props =&gt; VNode | Array&lt;VNode&gt; &#125;</span></span><br><span class="line">  scopedSlots: &#123;</span><br><span class="line">    <span class="keyword">default</span>: <span class="function"><span class="params">props</span> =&gt;</span> createElement(<span class="string">'span'</span>, props.text)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 如果组件是其他组件的子组件，需为插槽指定名称</span></span><br><span class="line">  slot: <span class="string">'name-of-slot'</span>,</span><br><span class="line">  <span class="comment">// 其他特殊顶层属性</span></span><br><span class="line">  key: <span class="string">'myKey'</span>,</span><br><span class="line">  ref: <span class="string">'myRef'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="jsx写法"><a href="#jsx写法" class="headerlink" title="jsx写法"></a>jsx写法</h2><p>React发明了JSX，利用HTML语法来创建虚拟DOM。当遇到 “&lt;”，JSX就当HTML解析，遇到 “{“ 就当JavaScript解析。 因此用一般模板写变量用 “{}”,中间是javascript表达式。特别注意render里面的指向问题！在组件里面使用也要带this的。</p><p><a href="https://github.com/vuejs/jsx#installation" target="_blank" rel="noopener">JSX 如何映射到 JavaScript</a></p><h3 id="vue如何支持jsx写法"><a href="#vue如何支持jsx写法" class="headerlink" title="vue如何支持jsx写法"></a>vue如何支持jsx写法</h3><p>在Vue 文件中引入 jsx 文件！ 需要配置webpack，令其支持处理jsx文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment">// 对src和test文件夹下的.js文件使用babel-loader将es6+的代码转成es5</span></span><br><span class="line">test: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">loader:<span class="string">'babel-loader'</span>,</span><br><span class="line">exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">include: [resolve(<span class="string">'src'</span>), resolve(<span class="string">'test'</span>), resolve(<span class="string">'node_modules/webpack-dev-server/client'</span>)],</span><br><span class="line">use: &#123;</span><br><span class="line">    loader:<span class="string">'babel-loader?cacheDirectory=true'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="1-基础使用"><a href="#1-基础使用" class="headerlink" title="1.基础使用"></a>1.基础使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vue.component(<span class="string">'jsxDemo'</span>, &#123;</span><br><span class="line">  render(h) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>jsxdemo<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-v-if-v-else"><a href="#2-v-if-v-else" class="headerlink" title="2.v-if / v-else"></a>2.v-if / v-else</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 三元表达式写法</span></span><br><span class="line">vue.component(<span class="string">'jsxDemo'</span>, &#123;</span><br><span class="line">  render(h) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;a=== 1 ? 'a' : 'b'&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 复杂的</span></span><br><span class="line">vue.component(<span class="string">'jsxDemo'</span>, &#123;</span><br><span class="line">  render(h) &#123;</span><br><span class="line">    <span class="keyword">let</span> text</span><br><span class="line">    <span class="keyword">if</span> a === <span class="number">1</span> text = a</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> a === <span class="number">2</span> text = b</span><br><span class="line">    <span class="keyword">else</span> text = c</span><br><span class="line">    <span class="keyword">return</span>(</span><br><span class="line">        &lt;p&gt;&#123;text&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure><h3 id="3-v-for-（渲染重复的样式-转化为数组）"><a href="#3-v-for-（渲染重复的样式-转化为数组）" class="headerlink" title="3.v-for （渲染重复的样式,转化为数组）"></a>3.v-for （渲染重复的样式,转化为数组）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vue.component(<span class="string">'jsxDemo'</span>, &#123;</span><br><span class="line">  render(h) &#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [a, b, c]</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            <span class="keyword">this</span>.arr.map(<span class="function"><span class="params">i</span> =&gt;</span> (<span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;i&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>))</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure><h3 id="4-v-model-语法糖-即传值value-事件绑定input监听）"><a href="#4-v-model-语法糖-即传值value-事件绑定input监听）" class="headerlink" title="4.v-model 语法糖(即传值value+事件绑定input监听）)"></a>4.v-model 语法糖(即传值value+事件绑定input监听）)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">vue.component(<span class="string">'jsxDemo'</span>, &#123;</span><br><span class="line">data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        text: <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">methods:&#123;</span><br><span class="line">    input(e)&#123;</span><br><span class="line">        <span class="keyword">this</span>.text=e.target.value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br><span class="line">render()&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;input type=<span class="string">"text"</span> value=&#123;<span class="keyword">this</span>.text&#125; onInput=&#123;<span class="keyword">this</span>.input&#125;/&gt;</span><br><span class="line">            &lt;p&gt;&#123;<span class="keyword">this</span>.text&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="5-自定义组件-直接引入使用"><a href="#5-自定义组件-直接引入使用" class="headerlink" title="5.自定义组件 直接引入使用"></a>5.自定义组件 直接引入使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> HelloWolrd <span class="keyword">from</span> <span class="string">'./HelloWorld'</span></span><br><span class="line">vue.component(<span class="string">'jsxDemo'</span>, &#123;</span><br><span class="line">  render(h) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;HelloWolrd/&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="6-事件-native-on-事件"><a href="#6-事件-native-on-事件" class="headerlink" title="6.事件 (native)on-事件"></a>6.事件 (native)on-事件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vue.component(<span class="string">'jsxDemo'</span>, &#123;</span><br><span class="line">  render(h) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;el-button onClick=&#123;functionName&#125; nativeOnClick=&#123;functionName&#125; on-click=<span class="string">"functionName"</span>&gt;&lt;<span class="regexp">/el-button&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure><h3 id="7-class，-style"><a href="#7-class，-style" class="headerlink" title="7. class， style"></a>7. class， style</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vue.component(<span class="string">'jsxDemo'</span>, &#123;</span><br><span class="line">render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=&#123;&#123;<span class="attr">XX</span>:XX&#125;&#125; <span class="class"><span class="keyword">class</span></span>=&#123;[<span class="string">"XX1"</span>, &#123;<span class="string">"XXX3"</span>: <span class="literal">true</span>&#125;]&#125; style=&#123;&#123;<span class="attr">XXX</span>: XX&#125;&#125;&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure><h3 id="8-JSX中的函数式组件"><a href="#8-JSX中的函数式组件" class="headerlink" title="8.JSX中的函数式组件"></a>8.JSX中的函数式组件</h3><p><a href="https://juejin.im/post/5affa64df265da0b93488fdd#heading-9" target="_blank" rel="noopener" title="参考资料">jsx函数式组件</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line"><span class="comment">// context.data就是你在父组件给子组件增加的属性</span></span><br><span class="line"><span class="comment">//  ...省略无关代码</span></span><br><span class="line"> render()&#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;Item data=&#123;<span class="keyword">this</span>.data&#125; <span class="class"><span class="keyword">class</span></span>=<span class="string">"large"</span>/&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//Item.vue组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    functional:<span class="literal">true</span>,</span><br><span class="line">      name: <span class="string">"item"</span>,</span><br><span class="line">      render(h,context)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"red"</span> &#123;...context.data&#125;&gt;</span><br><span class="line">            &#123;context.props.data&#125;</span><br><span class="line">          &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br></pre></td></tr></table></figure><h3 id="9-slot-之深度复制"><a href="#9-slot-之深度复制" class="headerlink" title="9.slot 之深度复制"></a>9.slot 之深度复制</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">vnodes, createElement</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">cloneVNode</span> (<span class="params">vnode</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> clonedChildren = vnode.children &amp;&amp; vnode.children.map(<span class="function"><span class="params">vnode</span> =&gt;</span> cloneVNode(vnode));</span><br><span class="line">    <span class="keyword">const</span> cloned = createElement(vnode.tag, vnode.data, clonedChildren);</span><br><span class="line">    cloned.text = vnode.text;</span><br><span class="line">    cloned.isComment = vnode.isComment;</span><br><span class="line">    cloned.componentOptions = vnode.componentOptions;</span><br><span class="line">    cloned.elm = vnode.elm;</span><br><span class="line">    cloned.context = vnode.context;</span><br><span class="line">    cloned.ns = vnode.ns;</span><br><span class="line">    cloned.isStatic = vnode.isStatic;</span><br><span class="line">    cloned.key = vnode.key;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cloned;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> clonedVNodes = vnodes.map(<span class="function"><span class="params">vnode</span> =&gt;</span> cloneVNode(vnode))</span><br><span class="line">  <span class="keyword">return</span> clonedVNodes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vue渲染函数-amp-jsx&quot;&gt;&lt;a href=&quot;#Vue渲染函数-amp-jsx&quot; class=&quot;headerlink&quot; title=&quot;Vue渲染函数 &amp;amp; jsx&quot;&gt;&lt;/a&gt;Vue渲染函数 &amp;amp; jsx&lt;/h1&gt;&lt;h2 id=&quot;vue关于渲染几个
      
    
    </summary>
    
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="jsx" scheme="http://yoursite.com/tags/jsx/"/>
    
  </entry>
  
  <entry>
    <title>money</title>
    <link href="http://yoursite.com/2020/03/18/demo/"/>
    <id>http://yoursite.com/2020/03/18/demo/</id>
    <published>2020-03-18T12:41:00.000Z</published>
    <updated>2020-03-18T12:42:11.961Z</updated>
    
    <content type="html"><![CDATA[<h1 id="你好"><a href="#你好" class="headerlink" title="你好"></a>你好</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;你好&quot;&gt;&lt;a href=&quot;#你好&quot; class=&quot;headerlink&quot; title=&quot;你好&quot;&gt;&lt;/a&gt;你好&lt;/h1&gt;
      
    
    </summary>
    
    
      <category term="money" scheme="http://yoursite.com/categories/money/"/>
    
    
      <category term="money" scheme="http://yoursite.com/tags/money/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/03/18/hello-world/"/>
    <id>http://yoursite.com/2020/03/18/hello-world/</id>
    <published>2020-03-18T08:36:42.731Z</published>
    <updated>2020-03-18T08:36:42.731Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
